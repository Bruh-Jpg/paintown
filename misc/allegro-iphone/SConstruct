import os

# From elias's xcodebuild for iphone
# /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.2 -x c -arch armv6 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -O0 "-DCMAKE_INTDIR=\"Debug\"" -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.3.sdk -gdwarf-2 -mthumb -miphoneos-version-min=4.3 -I/Users/elias/prog/git5/build-iphone/lib/Debug/include -I/Users/elias/prog/git5/include -I/Users/elias/prog/git5/build-iphone/include -I/Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphoneos/allegro.build/DerivedSources/armv6 -I/Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphoneos/allegro.build/DerivedSources -Wmost -Wno-four-char-constants -Wno-unknown-pragmas -F/Users/elias/prog/git5/build-iphone/lib/Debug -std=gnu99 -W -Wall -DDEBUGMODE=1 -DD3D_DEBUG_INFO -DALLEGRO_SRC -DALLEGRO_STATICLINK -DALLEGRO_LIB_BUILD -c /Users/elias/prog/git5/src/allegro.c -o /Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphoneos/allegro.build/Objects-normal/armv6/allegro.o

# x86 build for the simulator
# /Developer/Platforms/iPhoneSimulator.platform/Developer/usr/bin/gcc-4.2 -x c -arch i386 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -O0 "-DCMAKE_INTDIR=\"Debug\"" -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk -fexceptions -fasm-blocks -mmacosx-version-min=10.6 -gdwarf-2 -D__IPHONE_OS_VERSION_MIN_REQUIRED=40300 -I/Users/elias/prog/git5/build-iphone/lib/Debug/include -I/Users/elias/prog/git5/include -I/Users/elias/prog/git5/build-iphone/include -I/Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphonesimulator/allegro.build/DerivedSources/i386 -I/Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphonesimulator/allegro.build/DerivedSources -Wmost -Wno-four-char-constants -Wno-unknown-pragmas -F/Users/elias/prog/git5/build-iphone/lib/Debug -std=gnu99 -W -Wall -DDEBUGMODE=1 -DD3D_DEBUG_INFO -DALLEGRO_SRC -DALLEGRO_STATICLINK -DALLEGRO_LIB_BUILD -c /Users/elias/prog/git5/src/allegro.c -o /Users/elias/prog/git5/build-iphone/ALLEGRO.build/Debug-iphonesimulator/allegro.build/Objects-normal/i386/allegro.o


sim_env = Environment(ENV = os.environ)
phone_env = Environment(ENV = os.environ)

gccversion = '4.2'
iostarget = '4.3'
osxtarget = '10.5'
 
platform_sim = 'iPhoneSimulator'
platform_phone = 'iPhoneOS'
 
arch_sim = 'i686'
arch_phone = 'armv6'
 
sim_bin_dir = '/Developer/Platforms/%s.platform/Developer/usr/bin' % platform_sim
phone_bin_dir = '/Developer/Platforms/%s.platform/Developer/usr/bin' % platform_phone

# Set environment paths
sim_env.PrependENVPath('PATH', sim_bin_dir)
phone_env.PrependENVPath('PATH', phone_bin_dir)

sdkroot_sim = '/Developer/Platforms/%s.platform/Developer/SDKs/%s%s.sdk' % (platform_sim, platform_sim, iostarget)
sdkroot_phone = '/Developer/Platforms/%s.platform/Developer/SDKs/%s%s.sdk' % (platform_phone, platform_phone, iostarget)

postfix = '-%s' % gccversion
def setGCC(env):
    def setup(x, post):
        return '%s%s' % (x, post)
    # only the compiler can have different versions
    env['CC'] = setup('gcc', postfix)
    env['CXX'] = setup('g++', postfix)

    # env['LD'] = setup('ld', postfix)
    # env['AS'] = setup('as', postfix)
    # env['AR'] = setup('ar', postfix)
    # env['OBJCOPY'] = setup('objcopy', postfix)

setGCC(sim_env)
setGCC(phone_env)

def stringify(array):
    str = ''
    for item in array:
        str += item + ' '
    return [str.split(" ")]

cflags_sim = ['-arch %s' % arch_sim, '-pipe', '-mdynamic-no-pic', '-fvisibility=hidden', '-isysroot %s' % sdkroot_sim, '-std=gnu99', '-mmacosx-version-min=%s' % osxtarget]
ldflags_sim = ['-arch %s' % arch_sim, '-isysroot %s' % sdkroot_sim, '-Wl,-dead_strip', '-mmacosx-version-min=%s' % osxtarget]
defines_sim = Split("""
__IPHONE_OS_VERSION_MIN_REQUIRED=40300
DEBUGMODE=1
D3D_DEBUG_INFO
ALLEGRO_SRC
ALLEGRO_STATICLINK
ALLEGRO_LIB_BUILD""")
 
cflags_phone = ['-arch %s' % arch_phone, '-pipe', '-mdynamic-no-pic', '-fvisibility=hidden', '-isysroot %s' % sdkroot_phone, '-std=gnu99', '-miphoneos-version-min=%s' % iostarget]
ldflags_phone = ['-arch %s' % arch_phone, '-isysroot %s' % sdkroot_phone, '-Wl,-dead_strip', '-miphoneos-version-min=%s' % iostarget]
defines_phone = Split("""
DEBUGMODE=1
D3D_DEBUG_INFO
ALLEGRO_SRC
ALLEGRO_STATICLINK
ALLEGRO_LIB_BUILD""")

cflags =  Split("""-g -O2 -gdwarf-2 -mthumb -Wall -Wmissing-prototypes -ffast-math -fno-strict-aliasing -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -O0 -Wmost -Wno-four-char-constants -Wno-unknown-pragmas""")

cppflags = Split("""-x objective-c -g -O2 -gdwarf-2 -fobjc-abi-version=2 -fobjc-legacy-dispatch -Wall -fno-strict-aliasing""")

includes = Split("""include""")

includes1 = Split("""
include 
include/allegro5 
include/allegro5/inline 
include/allegro5/internal 
include/allegro5/opengl 
include/allegro5/platform 
src 
src/gp2xwiz 
src/iphone 
src/linux 
src/macosx 
src/misc 
src/opengl 
src/unix 
src/win 
src/x 
addons/primitives 
addons/primitives/allegro5 
addons/primitives/allegro5/internal
addons/ttf 
addons/ttf/allegro5 
addons/ttf/allegro5/internal""")

def setFlags(includes, cflags, cppflags, ldflags, defines, env):
    env.Append(CPATH = includes)
    env.Append(CPPPATH = includes)
    env.Append(CFLAGS = cflags)
    env.Append(CPPFLAGS = cppflags)
    env.Append(LDFLAGS = ldflags)
    env.Append(CPPDEFINES = defines)
    
setFlags(includes + ['-I%s/usr/include' % sdkroot_sim], cflags + stringify(cflags_sim), cppflags + stringify(cflags_sim), stringify(ldflags_sim), defines_sim, sim_env)
setFlags(includes + ['-I%s/usr/include' % sdkroot_phone], cflags + stringify(cflags_phone), cppflags + stringify(cflags_phone), stringify(ldflags_phone), defines_phone, phone_env)

source = Split("""
allegro.c
display.c
file_slice.c
iphone/EAGLView.m
iphone/ViewController.m
iphone/allegroAppDelegate.m
iphone/iphone_display.c
iphone/iphone_joystick.m
iphone/iphone_keyboard.c
iphone/iphone_main.m
iphone/iphone_mouse.m
iphone/iphone_path.m
iphone/iphone_system.c
iphone/iphone_touch_input.m
math.c 
opengl/extensions.c
opengl/ogl_bitmap.c
opengl/ogl_display.c
opengl/ogl_draw.c
threads.c
unix/udrvlist.c
unix/ufdwatch.c
unix/ugfxdrv.c
unix/ujoydrv.c
unix/ukeybd.c
unix/umodules.c
unix/umouse.c
unix/upath.c
unix/utime.c
unix/uxthread.c
bitmap.c
display_settings.c
file_stdio.c
joynu.c
memblit.c
optimized.c
timernu.c
utf8.c
bitmap_io.c
dtor.c
fshook.c
keybdnu.c
memdraw.c
path.c
tls.c
blenders.c
events.c
fshook_stdio.c
libc.c
memory.c
pixels.c
touch_input.c
config.c
evtsrc.c
misc/aatree.c
misc/bstrlib.c
misc/bstrlib.txt
misc/list.c
misc/vector.c
transformations.c
convert.c
file.c
inline.c
mousenu.c
system.c
tri_soft.c""")

primitives = Split("""
primitives/directx_shaders.cpp
primitives/high_primitives.c
primitives/line_soft.c
primitives/point_soft.c
primitives/polygon.c
primitives/polyline.c
primitives/prim_directx.cpp
primitives/prim_opengl.c
primitives/prim_soft.c
primitives/prim_util.c
primitives/primitives.c
primitives/triangulator.c
""")

ttf = Split("""ttf/ttf.c""")
memfile = Split("""memfile/memfile.c""")
image = Split("""image/bmp.c image/iio.c image/iphone.m image/png.c image/jpg.c image/pcx.c image/tga.c""")
audio = Split("""audio/audio.c audio/kcm_instance.c audio/kcm_sample.c audio/kcm_voice.c audio/audio_io.c audio/kcm_dtor.c audio/kcm_mixer.c audio/kcm_stream.c audio/openal.c""")

libsim = 'lib/sim'
libphone = 'lib/phone'

def prepend(location, source):
    new_source = []
    for s in source:
        new_source.append('%s/%s' % (location, s))
    return new_source

sim_env.VariantDir('build/sim', 'src')
sim_env.VariantDir('build/sim/addons', 'addons')
phone_env.VariantDir('build/phone', 'src')
phone_env.VariantDir('build/phone/addons', 'addons')

def createAddonIncludes(name):
    return ['addons/%s' % name, 'addons/%s/allegro5' % name, 'addons/%s/allegro5/internal' % name]

def buildLib(env, libname, sources, includes = ''):
    new_env = env
    new_env.Append(CPATH = includes)
    new_env.Append(CPPPATH = includes)
    new_env.Library(libname, sources)

# Simulator
buildLib(sim_env, '%s/allegro' % libsim, prepend('build/sim', source))
#buildLib(sim_env, '%s/allegro_ttf' % libsim, prepend('build/sim/addons', ttf), createAddonIncludes('ttf'))
buildLib(sim_env, '%s/allegro_memfile' % libsim, prepend('build/sim/addons', memfile), createAddonIncludes('memfile'))
#buildLib(sim_env, '%s/allegro_image' % libsim, prepend('build/sim/addons', image), createAddonIncludes('image'))
buildLib(sim_env, '%s/allegro_primitives' % libsim, prepend('build/sim/addons', primitives))
buildLib(sim_env, '%s/allegro_audio' % libsim, prepend('build/sim/addons', audio), createAddonIncludes('audio'))

# Phone
buildLib(phone_env, '%s/allegro' % libphone, prepend('build/phone', source))
#buildLib(phone_env, '%s/allegro_ttf' % libphone, prepend('build/phone/addons', ttf), createAddonIncludes('ttf'))
buildLib(phone_env, '%s/allegro_memfile' % libphone, prepend('build/phone/addons', memfile), createAddonIncludes('memfile'))
#buildLib(phone_env, '%s/allegro_image' % libphone, prepend('build/phone/addons', image), createAddonIncludes('image'))
buildLib(phone_env, '%s/allegro_primitives' % libphone, prepend('build/phone/addons', primitives))
buildLib(phone_env, '%s/allegro_audio' % libphone, prepend('build/phone/addons', audio), createAddonIncludes('audio'))