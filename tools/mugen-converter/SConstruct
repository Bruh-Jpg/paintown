import os

env = Environment(ENV = os.environ)
env.VariantDir('build/converter', 'src')
env.VariantDir('build/paintown', '../../src')
env.Append(CPPPATH = ['../../src/mugen', '../../src'])
def peg_to_cpp(target, source, env):
    import sys
    sys.path.append("../../src/mugen/parser")
    sys.path.append(".")
    import peg, re, cpp_generator
    name = source[0].name
    parser = peg.make_peg_parser(re.sub('\..*', '', name))
    fout = open(target[0].path, 'w')
    fout.write(cpp_generator.generate(parser(source[0].path)))
    fout.write('\n')
    fout.close()

peg_builder = Builder(action = Action(peg_to_cpp, 'Building a peg'),
        suffix = '.cpp',
        src_suffix = '.peg')
env.Append(BUILDERS = {'Peg' : peg_builder})

source = Split("""
build/converter/main.cpp
build/paintown/mugen/ast/ast.cpp
build/paintown/mugen/exception.cpp
build/paintown/util/token.cpp
build/paintown/util/token_exception.cpp
build/paintown/exceptions/exception.cpp
""")
source.append(env.Peg('build/paintown/mugen/parser/cmd.peg'))
source.append(env.Peg('build/paintown/mugen/parser/air.peg'))
source.append(env.Peg('build/paintown/mugen/parser/def.peg'))
env.Program('converter', source)
