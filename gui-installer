#!/usr/bin/env python
# -*- coding: utf-8 -*-

# GTK or QT based installer

# Copy files to some directory, symlink the binary.

import sys

class Signals:
    pass
Signals.Triggered = "triggered()"
Signals.Close = "close()"
Signals.Clicked = "clicked()"

from PyQt4 import QtCore, QtGui, uic
from PyQt4.QtCore import *
from PyQt4.QtGui import *

app = QtGui.QApplication(sys.argv)

# Set the look and feel
QtGui.QApplication.setStyle(QtGui.QStyleFactory.create("Cleanlooks"))

# Globals
paintownVersion = [3.2]
binLocation = ['/usr/share/games/paintown']
dataLocation = ['/usr/games']
allowExit = [True]
currentPage = [0]
eula = [False]

# Load Interface
widget = uic.loadUi("installer/installer.ui")
widget.back.setEnabled(False)

# Exit override
# def exitOverride(self, event):
def exitOverride(event):
    if allowExit[0]:
        event.accept()
    else:
        event.ignore()
    # Here we will prompt user "Are they sure?"
    # If yes stop current copy and remove files and exit program

# override exit
widget.closeEvent = exitOverride

# About
def about():
    QMessageBox.about(widget, 'Paintown ', 'A simple installer built with PyQt')

# About Qt
def aboutQt():
    QMessageBox.aboutQt(widget, 'About Qt')

# Set About info
menuAbout = QtGui.QAction('About Paintown', widget)
widget.connect(menuAbout,SIGNAL(Signals.Triggered), about)
widget.about.addAction(menuAbout)

menuAboutQt = QtGui.QAction('About Qt', widget)
widget.connect(menuAboutQt,SIGNAL(Signals.Triggered), aboutQt)
widget.about.addAction(menuAboutQt)

# Set Exit installer
exit = QtGui.QAction('Exit', widget)
exit.setShortcut('Ctrl+Q')
exit.setStatusTip('Quit Installer')
widget.connect(exit, SIGNAL(Signals.Triggered), SLOT(Signals.Close))
widget.file.addAction(exit)

#Back function
def backButton():
    currentPage[0] -= 1
    if currentPage[0] <= 0:
        currentPage[0] = 0
	widget.back.setEnabled(False)
    elif currentPage[0] == 1:
	widget.back.setEnabled(True)
    elif currentPage[0] == 2:
	widget.back.setEnabled(True)
    elif currentPage[0] == 3:
	widget.back.setEnabled(False)
    elif currentPage[0] == 4:
	widget.back.setEnabled(False)
    widget.stackedWidget.setCurrentIndex(currentPage[0])

#Forward function
def forwardButton():
    currentPage[0] += 1
    if currentPage[0] > 1 and not eula[0]:
        currentPage[0] = 1
    elif currentPage[0] == 1:
	widget.back.setEnabled(True)
    elif currentPage[0] == 3:
	widget.back.setEnabled(False)
	# disable forward until copy is complete
	#widget.next.setEnabled(False)
	allowExit[0] = False
    elif currentPage[0] == 4:
	allowExit[0] = True
	widget.disconnect(widget.next, SIGNAL(Signals.Clicked), forwardButton)
	widget.connect(widget.next, SIGNAL(Signals.Clicked), SLOT(Signals.Close))
	widget.next.setText('Exit')

    widget.stackedWidget.setCurrentIndex(currentPage[0])

#Set User agreement
def toggleEula():
    eula[0] = not eula[0]

#Select Binary Directory
def selectBinDirectory():
    tempstr = QFileDialog.getExistingDirectory(widget, 'Please Select Binary Directory', binLocation[0], QFileDialog.ShowDirsOnly)
    if not tempstr == '':
        binLocation[0] = tempstr
        widget.binDir.setText(tempstr)

#Select Data Directory
def selectDataDirectory():
    tempstr = QFileDialog.getExistingDirectory(widget, 'Please Select Data Directory', dataLocation[0], QFileDialog.ShowDirsOnly)
    if not tempstr == '':
        dataLocation[0] = tempstr
        widget.dataDir.setText(tempstr)

# Update the widgets with the needed Info
widget.connect(widget.back, SIGNAL(Signals.Clicked), backButton)
widget.connect(widget.next, SIGNAL(Signals.Clicked), forwardButton)
widget.connect(widget.eula, SIGNAL(Signals.Clicked), toggleEula)
widget.connect(widget.changeBinDir, SIGNAL(Signals.Clicked), selectBinDirectory)
widget.connect(widget.changeDataDir, SIGNAL(Signals.Clicked), selectDataDirectory)
widget.back.setShortcut('Alt+B')
widget.next.setShortcut('Alt+N')

# Page 1 - Intro and graphic
scene = QGraphicsScene()
scene.addPixmap(QPixmap('data/menu/paintown.png'))
widget.WelcomePage.setScene(scene)
#widget.WelcomePage.scale(1,1)
widget.WelcomePage.fitInView(0, 0, 94,29)
widget.WelcomePage.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
widget.WelcomePage.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

# Page 2 - End User Agreement or License
widget.textBrowser.setPlainText(QString(open(str('README')).read()))
#widget.textBrowser.selectAll()
#widget.textBrowser.setAlignment(Qt.AlignCenter)
#widget.textBrowser.moveCursor(QTextCursor.Start)

# Page 3 - Install Locations
widget.binDir.setText(binLocation[0])
widget.dataDir.setText(dataLocation[0])

# Page 4 - Console Output
# Add file copy info and renable next button after complete

# Page 5 - Finished - Nothing to do

# show widget
widget.show()

# Run
app.exec_()


