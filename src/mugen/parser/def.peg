# mugen def parser
start-symbol: start
options: debug0
module: Mugen.Def
include: {{
#include "../ast/Section.h"
typedef std::list<Ast::Section*> SectionList;
}}
code: {{
void addSection(const Value & section_list_value, const Value & section_value){
  SectionList * sections = (SectionList*) section_list_value.getValue();
  Ast::Section * section = (Ast::Section*) section_value.getValue();
  sections->push_back(section);
}

Ast::Section * makeSection(){
  return new Ast::Section();
}
}}
rules:
	start = {{ SectionList * sections = new SectionList(); value = (void*) sections; }} current:{{value = $1;}} whitespace newline* (line(current) whitespace line_end?)* <eof> {{ value = $1; }}
	line(current) = s comment
	              | s section {{ addSection(current, $1); }}
	     # | s characters
	     #| s attribute {{ value = current; }}
	     #| s valuelist {{ value = current; }}
	     #| s loopstart {{ value = current; }}
	              | space+
	line_end = newline+
	         | &<eof> <void>
	inline newline = "\n"
                   | "\r"
	loopstart = "loopstart"{case}
	whitespace = sw*
	sw = " "
	   | "\t"
	   | comment
	s = space*
	inline space = " "
	             | "\t"
	inline comment = ";" (!"\n" .)*
	        | "=" (!"\n" .)*
		| "-" "-"+
	section = section_start ast:{{value = makeSection();}} whitespace line_end+ (section_line whitespace line_end)* {{ value = ast; }}
    section_line = s comment
                 | s attribute
                 | s valuelist
                 | s loopstart
                 | space+ !"["
    section_start = "[" s (!"]" .)+ s "]"
	name = letter alpha_digit* {{
		/*
	   std::ostringstream out;
	   for (Value::iterator it = $1.getValues().begin(); it != $1.getValues().end(); it++){
	   	out << (char) (long) (*it).getValue();
	   }
	   // std::cout << "Name " << out.str() << std::endl;
	   */
	}}
	inline letter = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
	alpha_digit = letter
	            | digit
	# characters = name s "," s filename
	filename = !<quote> filename_char+
	filename_char = !"," !"\n" !"[" .
	attribute = identifier s "=" s valuelist
	          | identifier s "=" s filename
		  | identifier s "(" s number s ")" s "=" s valuelist
		  | identifier_list s "=" s valuelist
	identifier = name ("." name)*
	identifier_list = identifier (s "," s filename)+
	valuelist = value (s "," s value?)*
	value = string
	      | date
	      | number
	      | [sS] !letter !"."
	      | [hH] !letter !"."
	      | [aA] number? !letter
              | filename
	date = digit+ "." digit+ "." digit+
	string = <quote> (!<quote> !"\n" .)* <quote>
	number = sign? float_or_integer
	inline sign = "+"
	            | "-"
	float_or_integer = digit* "." digit+
	                 | digit+ !"."
	inline digit = [0123456789]
