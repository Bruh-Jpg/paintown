# mugen def parser
start-symbol: start
options: debug0
module: Mugen.Def
include: {{
#include "../ast/all.h"
typedef std::list<Ast::Section*> SectionList;
}}

code: {{

/* poor man's garbage collection.
 * after parsing every pointer stored in this list is checked to see if it
 * is stored in the resulting AST. If the AST does not know about the pointer
 * then no one else does and the pointer should be deleted.
 *
 * void* doesn't work because it doesn't call the destructor. instead use
 * a new class, Collectable, with constructors and fields for every class
 * that is allocated. Collectable will call the appropriate destructor.
 */
static std::list<Ast::Collectable> saved_pointers;

template<class X>
X as(const Value & value){
    return (X) value.getValue();
}

void addSection(const Value & section_list_value, const Value & section_value){
  SectionList * sections = (SectionList*) section_list_value.getValue();
  Ast::Section * section = (Ast::Section*) section_value.getValue();
  if (section == 0){
    std::cerr << "Cannot add null section" << std::endl;
    throw ParseException();
  }
  sections->push_back(section);
}

Ast::Section * makeSection(const Value & str){
  return new Ast::Section(as<std::string*>(str));
}

template<class X>
void save(const X x){
    saved_pointers.push_back(Ast::Collectable(x));
}

SectionList * makeSectionList(){
  return new SectionList();
}

std::string * toString(const Value & input){
  std::ostringstream out;
  for (Value::iterator it = input.getValues().begin(); it != input.getValues().end(); it++){
    out << (char) (long) (*it).getValue();
  }
  return new std::string(out.str());
}

double * parseDouble(const Value & value){
    std::string * str = toString(value);
    std::istringstream get(*str);
    double * number = new double;
    get >> *number;
    delete str;
    return number;
}

double * parseDouble(const Value & left, const Value & right){
    std::string * str1 = toString(left);
    std::string * str2 = toString(right);
    std::istringstream get(*str1 + "." + *str2);
    double * number = new double;
    get >> *number;
    delete str1;
    delete str2;
    return number;
}

std::string * toString(char front, const Value & input){
  std::string * str = toString(input);
  str->insert(str->begin(), front);
  return str;
}

Ast::Attribute * makeAttribute(const Value & id, const Value & data){
    return new Ast::AttributeSimple(as<Ast::Identifier*>(id), as<Ast::Value*>(data));
}

Ast::Attribute * makeAttribute(const Value & id){
    return new Ast::AttributeSimple(as<Ast::Identifier*>(id));
}

Ast::Attribute * makeAttributeFilename(const Value & id, const Value & data){
    return makeAttribute(id, data);
}

Ast::Attribute * makeIndexedAttribute(const Value & id, const Value & index, const Value & data){
    return new Ast::Attribute();
}

Ast::Keyword * makeKeyword(const Value & value){
    return new Ast::Keyword(as<char*>(value));
}

Ast::Attribute * makeAttributes(const Value & id, const Value & data){
    return new Ast::Attribute();
}

Ast::Value * makeValue(){
    return new Ast::Value();
}

Ast::Value * makeValueList(const Value & front, const Value & rest){
    std::list<Ast::Value*> values;
    values.push_back(as<Ast::Value*>(front));
    for (Value::iterator it = rest.getValues().begin(); it != rest.getValues().end(); it++){
        Ast::Value * value = as<Ast::Value*>((*it).getValue());
        values.push_back(value);
    }
    return new Ast::ValueList(values);
}

Ast::Identifier * makeIdentifier(const Value & front, const Value & rest){
    std::list<std::string*> ids;
    ids.push_back(as<std::string*>(front));
    for (Value::iterator it = rest.getValues().begin(); it != rest.getValues().end(); it++){
        ids.push_back(as<std::string*>((*it).getValue()));
    }
    return new Ast::Identifier(ids);
}

Ast::Value * makeNumber(const Value & sign, const Value & number){
    double value = *(as<double*>(number));
    if (sign.getValue() != 0){
        value = -value;
    }

    return new Ast::Number(value);
}

Ast::String * makeString(const Value & value){
    return new Ast::String(toString(value));
}

Ast::Section * asSection(const Value & value){
    return as<Ast::Section*>(value);
}

Ast::Attribute * asAttribute(const Value & value){
    return as<Ast::Attribute*>(value);
}

Ast::Value * asValue(const Value & value){
    return as<Ast::Value*>(value);
}

bool referenced(SectionList * list, const void * value){
    if (value == list){
        return true;
    }
    for (SectionList::iterator it = list->begin(); it != list->end(); it++){
        Ast::Section * section = *it;
        if (section->referenced(value)){
            return true;
        }
    }

    return false;
}

/* garbage collection */
void cleanup(const Value & value){
    SectionList * list = as<SectionList*>(value);
    for (std::list<Ast::Collectable>::iterator it = saved_pointers.begin(); it != saved_pointers.end(); it++){
        Ast::Collectable & collect = *it;
        if (! referenced(list, collect.pointer())){
            collect.destroy();
        }
    }
    saved_pointers.clear();
}

}}

rules:
	start = current:{{ value = makeSectionList(); save(as<SectionList*>(value)); }} whitespace newline* (line(current) whitespace line_end?)* <eof> {{ value = current; cleanup(value); }}
    # start = current real_start($1)
    # real_start(c) = blah ... <eof>
    #               | {{ delete c; }} <error>
    # or
    # start = current{{..}} blah .. <eof> <fail>{{ delete current.getValue(); }}
	line(current) = s comment
	              | s section {{ addSection(current, $2); }}
	     # | s characters
	     #| s attribute {{ value = current; }}
	     #| s valuelist {{ value = current; }}
	     #| s loopstart {{ value = current; }}
	              | space+
	line_end = newline+
	         | &<eof> <void>
	inline newline = "\n"
                   | "\r"
	whitespace = sw*
	sw = " "
	   | "\t"
	   | comment
	s = space*
	inline space = " "
	             | "\t"
	inline comment = ";" (!"\n" .)*
	               | "=" (!"\n" .)*
		           | "-" "-"+
	section = section_start ast:{{value = makeSection($1); save(as<Ast::Section*>(value)); }} whitespace line_end+ (section_line(ast) whitespace line_end)* {{ value = ast; }}
    section_line(section) = s comment
                          | s data:attribute {{ asSection(section)->addAttribute(asAttribute(data)); }}
                          | s data:valuelist {{ asSection(section)->addValue(asValue(data)); }}
                          | s data:loopstart {{ asSection(section)->addValue(asValue(data)); }}
                          | space+ !"["
    section_start = "[" s data:(!"]" .)+ s "]" {{ value = toString(data); save(as<std::string*>(value)); }}
	loopstart = "loopstart"{case} {{ value = makeValue(); save(as<Ast::Value*>(value)); }}
	name = letter alpha_digit* {{ value = toString((char)(long)$1.getValue(),$2); save(as<std::string*>(value)); }}
	inline letter = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
	alpha_digit = letter
	            | digit
    line_end_or_comment = line_end
                        | comment
	# characters = name s "," s filename
	filename = !<quote> file:filename_char+ {{ value = new Ast::Filename(toString(file)); save(as<Ast::Filename*>(value)); }}
	filename_char = !"," !"\n" !"[" .
	attribute = id:identifier s "=" s &line_end_or_comment {{ value = makeAttribute(id); save(as<Ast::Value*>(value)); }}
              | id:identifier s "=" s data:valuelist {{ value = makeAttribute(id, data); save(as<Ast::Value*>(value)); }}
	          | id:identifier s "=" s data:filename {{ value = makeAttributeFilename(id, data); save(as<Ast::Value*>(value)); }}
		      | id:identifier s "(" s index:number s ")" s "=" s data:valuelist {{ value = makeIndexedAttribute(id, index, data); save(as<Ast::Value*>(value)); }}
		      | id:identifier_list s "=" s data:valuelist {{ value = makeAttributes(id, data); save(as<Ast::Value*>(value)); }}
	identifier = name ("." name)* {{ value = makeIdentifier($1,$2); save(as<Ast::Identifier*>(value)); }}
	identifier_list = identifier (s "," s filename)+
	valuelist = value (s "," s value?)* {{ value = makeValueList($1,$2); save(as<Ast::Value*>(value)); }}
	value = string
	      | date {{ value = 0; }}
	      | number
          | keyword {{ value = makeKeyword($1); save(as<Ast::Value*>(value)); }}
	      | "s"{case} !letter !"." {{ value = 0; }}
	      | "h"{case} !letter !"." {{ value = 0; }}
	      | "a"{case} number? !letter {{ value = 0; }}
          | filename
    keyword = "normal"
            | "parallax"
            | "addalpha"
            | "add"
            | "add1"
            | "sub"
	date = digit+ "." digit+ "." digit+
	string = <quote> data:(!<quote> !"\n" .)* <quote> {{ value = makeString(data); save(as<Ast::String*>(value)); }}
	number = sign? float_or_integer {{ value = makeNumber($1,$2); save(as<Ast::Value*>(value)); }}
	inline sign = "+"
	            | "-"
	float_or_integer = left:digit* "." right:digit+ {{ value = parseDouble(left,right); save(as<double*>(value)); }}
	                 | digit+ !"." {{ value = parseDouble($1); save(as<double*>(value)); }}
	inline digit = [0123456789]
