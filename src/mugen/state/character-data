include "common.h"
include "compiler.h"
include <map>
namespace Mugen
struct StateData{
    /* number of juggle points left */
    int juggleRemaining;
    /* number of juggle points the current move will take */
    int currentJuggle;

    int currentState;
    int previousState;
    int currentAnimation;
 
    double velocity_x;
    double velocity_y;
    
    bool has_control;
 
    /* how much time the player has been in the current state */
    int stateTime;
    
    /* dont delete these in the destructor, the state controller will do that */
    std::map<int, RuntimeValue> variables;
    std::map<int, RuntimeValue> floatVariables;
    std::map<int, RuntimeValue> systemVariables;
    Physics::Type currentPhysics;
 
    /* S (stand), C (crouch), A (air), L (lying down) */
    std::string stateType;
    std::string moveType;
    
    HitDefinition hit;
    
    HitState hitState;
 
    int combo;
    int hitCount;
    
    /* true if the player is holding the back button */
    bool blocking;
    
    /* true if the player is currently guarding an attack */
    bool guarding;
 
    struct WidthOverride{
        bool enabled;
        int edgeFront;
        int edgeBack;
        int playerFront;
        int playerBack;
    } widthOverride;
       
    struct HitByOverride{
            bool standing;
            bool crouching;
            bool aerial;
            int time;
            std::vector<AttackType::Attribute> attributes;
    } hitByOverride[2];
   
    /* reduces damage taken */
    double defenseMultiplier;
    /* increase attack damage */
    double attackMultiplier;
  
    /* if frozen then the player won't move */
    bool frozen;
 
    ReversalData reversal;
    bool reversalActive;

    struct TransOverride{
       bool enabled;
       TransType type;
       int alphaSource;
       int alphaDestination;
    } transOverride;

    // PushPlayer only one tick
    int pushPlayer;
  
    struct SpecialStuff{
       bool invisible;
       bool intro;
    } special;

    double health;
 
    /* keeps track of binds to other characters. Used for BindToRoot and
     * BindToTarget
     */
    struct Bind{
        CharacterId bound;
        int time;
        int facing;
        double offsetX;
        double offsetY;
    } bind;
      
    std::map<int, std::vector<CharacterId> > targets;
    int spritePriority;

    /* number of times this character has been hit in total */
    unsigned int wasHitCounter;
 
    struct CharacterData {
        CharacterId who;
        bool enabled;
    } characterData;
 
    double drawAngle;
    struct DrawAngleEffect{
        bool enabled;
        double angle;
        double scaleX;
        double scaleY;
    } drawAngleData;
      
    /* Current set of commands, updated in act() */
    std::vector<std::string> active;
    std::map<int, HitOverride> hitOverrides;

    double virtualx;
    double virtualy;
    double virtualz;

    Facing facing;
}
