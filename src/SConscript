Import('use');

def isOSX():
    import re
    import sys
    return "darwin" in sys.platform

def isWindows():
    import re
    import sys
    return "win32" in sys.platform

obj_files = []

def addFiles(files):
    obj_files.append(map(lambda x: x.replace('src/', ''), files))

import sys
sys.path.append("../scons")
import helpers

obj_files = []

filelist = helpers.read_cmake_list("../cmake/FileList.cmake")

def sprigLibrary(env):
    sprig = env.Clone()
    source = Split("""
util/sdl/sprig/SPG_extended.c
util/sdl/sprig/SPG_misc.c
util/sdl/sprig/SPG_polygon.c
util/sdl/sprig/SPG_primitives.c
util/sdl/sprig/SPG_rotation.c
util/sdl/sprig/SPG_surface.c
""")

    return sprig.StaticLibrary('sprig', source)

def stretchLibrary(env):
    stretch = env.Clone()
    # FIXME: asm has some bug in it, try to fix it later
    stretch.Append(CPPDEFINES = ['SDL_STRETCH_DISABLE_ASM'])
    source = Split("""
util/sdl/stretch/sdlstretch.c
util/sdl/stretch/sdlstretchcode.c
""")

    return stretch.StaticLibrary('stretch', source)

def alGifLibrary(env):
    gif = env.Clone()
    source = Split("""
util/gif/algif.c
util/gif/gif.c
util/gif/lzw.c
""")
    return gif.StaticLibrary('algif', source)

def sdlImageLibrary(env):
    image = env.Clone()
    image.Append(CPPDEFINES = ['LOAD_PNG', 'LOAD_PCX', 'LOAD_GIF'])
    source = Split("""
util/sdl/image/IMG.c
util/sdl/image/IMG_jpg.c
util/sdl/image/IMG_pnm.c
util/sdl/image/IMG_xpm.c
util/sdl/image/IMG_ImageIO.c
util/sdl/image/IMG_lbm.c
util/sdl/image/IMG_tga.c
util/sdl/image/IMG_xv.c
util/sdl/image/IMG_bmp.c
util/sdl/image/IMG_pcx.c
util/sdl/image/IMG_tif.c
util/sdl/image/IMG_xxx.c
util/sdl/image/IMG_gif.c
util/sdl/image/IMG_png.c
util/sdl/image/IMG_xcf.c
""")

    return image.StaticLibrary('image',source)

def sdlMixerLibrary(env):
    use = env
    return SConscript('util/sdl/mixer/SConscript', exports = ['use'])

def sflLibrary(env):
    use = env
    return SConscript('util/sfl/SConscript', exports = ['use'])

def soxLibrary(env):
    use = env
    return SConscript('util/sox/SConscript', exports = ['use'])

def gmeLibrary(env):
    use = env
    return SConscript('util/gme/SConscript', exports = ['use'])

def unique(lst):
    m = []
    for item in lst:
        if not item in m:
            m.append(item)
    return m

for i in filelist:
    # print "%s = %s" % (i, filelist[i])
    # meh, kind of a hack
    if i == 'SCRIPT_SRC':
        # call the python and ruby checks here
        env = use.Clone()
        # config = env.Configure()
        # Ugly way to pass the custom tests in
        config = env.Configure(custom_tests = env['PAINTOWN_TESTS'])
        # config.CheckRuby()
        config.CheckPython()
        env = config.Finish()
        use.Append(LIBS = env['LIBS'])
        use.Replace(LIBS = unique(use['LIBS']))
        files = filelist[i]
        # abstract this so we don't duplicate code
        obj_files.append(map(lambda x: env.StaticObject(x.replace('src/', '')), files))
    else:
        addFiles(filelist[i])

# FIXME: somehow get this information from the scons env
def useSDL():
    return use['PAINTOWN_BACKEND'] == 'sdl'

def useAndroid():
    import os
    try:
        return int(os.environ['android'])
    except KeyError:
        return False

def useMinpspw():
    import os
    try:
        return int(os.environ['minpspw'])
    except KeyError:
        return False

def useWii():
    import os
    try:
        return int(os.environ['wii'])
    except KeyError:
        return False

def icon():
    if isWindows() and not useMinpspw() and not useWii():
        return ['util/windows/game.res']
    else:
        return []

def pcreLibrary(env):
    pcreEnv = env.Clone()
    env = pcreEnv
    return use.SConscript('util/pcre/SConstruct', exports = ['env'])

def dumbLibrary(env):
    dumbEnv = env.Clone()
    env = dumbEnv
    return use.SConscript('util/dumb/SConscript', exports = ['env'])

def hawknlLibrary(env):
    hawkEnv = env.Clone()
    env = hawkEnv
    # if isOSX():
    #    env.Append(CPPDEFINES = 'MACOSX')
    return env.SConscript('util/network/hawknl/SConscript', exports = ['env'])

def main():
    return ['xmain.cpp']
    
def androidSDLMain():
    if useAndroid():
        return ['util/android/SDL_android_main.cpp']
    else:
        return []

def psp_prx(env):
    if env['PAINTOWN_USE_PRX']:
        # FIXME: Use the pspsdk path from the top level SConstruct
        return ['/opt/pspsdk/psp/sdk/lib/prxexports.o']
    else:
        return []

use.Depends(use.Peg('openbor/data.peg'), 'mugen/parser/peg.py')

use.Prepend(LIBS = [dumbLibrary(use)])
if use['PAINTOWN_NETWORKING']:
    use.Prepend(LIBS = [hawknlLibrary(use)])

use.Prepend(LIBS = [gmeLibrary(use), sflLibrary(use), pcreLibrary(use)])
if not useSDL():
    use.Prepend(LIBS = [alGifLibrary(use)])
if useSDL() and not useMinpspw():
    use.Prepend(LIBS = [sdlImageLibrary(use), sprigLibrary(use), sdlMixerLibrary(use), stretchLibrary(use)])
elif useMinpspw():
    use.Prepend(LIBS = [sprigLibrary(use), stretchLibrary(use)])

def addObjects(objects):
    obj_files.extend(objects)

SConscript('mugen/parser/SConstruct', exports = ['use', 'addObjects']);

x = []
# FIXME: adding psp_prx here is ugly, find a better way
x.append(use.Program('paintown', psp_prx(use) + obj_files + main() + icon() + androidSDLMain()))
#x.append( use.Program( 'test', obj_files + ['test.cpp'] ) )
#x.append( use.Program( 'menutest', obj_files + ['menu/menutest.cpp'] ) )

# Uncomment these lines if you really want the test program, but it only
# works with Allegro
#if not useSDL():
#    x.append(use.Program('mugentest', obj_files + ['mugen/test.cpp']))

# x.append( use.Program( 'mugentest2', obj_files + ['mugen/test2.cpp'] ) )

SConscript('test/SConstruct', exports = ['use'])

Return('x')
