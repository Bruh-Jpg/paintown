Import('use');

def isWindows():
    import re
    import sys
    return "win32" in sys.platform

obj_files = []

def addFiles(files):
    obj_files.append(map(lambda x: x.replace('src/', ''), files))

import sys
sys.path.append("../scons")
import helpers

obj_files = []

filelist = helpers.read_cmake_list("../cmake/FileList.cmake")

def sdlStretchLibrary(env):
    sdl = env.Clone()
    source = Split("""
util/sdl/stretch/sdlscreen.c
util/sdl/stretch/sdlstretch.c
""")
    return sdl.StaticLibrary('sdl-stretch', source)

def sflLibrary(env):
    use = env
    return SConscript('sfl/SConscript', exports = ['use'])

def gmeLibrary(env):
    gmeEnv = env.Clone()
    source = Split("""
gme/Ay_Apu.cpp
gme/Ay_Cpu.cpp
gme/Ay_Emu.cpp
gme/Blip_Buffer.cpp
gme/Classic_Emu.cpp
gme/Data_Reader.cpp
gme/Dual_Resampler.cpp
gme/Effects_Buffer.cpp
gme/Fir_Resampler.cpp
gme/Gb_Apu.cpp
gme/Gb_Cpu.cpp
gme/Gb_Oscs.cpp
gme/Gbs_Emu.cpp
gme/gme.cpp
gme/Gme_File.cpp
gme/Gym_Emu.cpp
gme/Hes_Apu.cpp
gme/Hes_Cpu.cpp
gme/Hes_Emu.cpp
gme/Kss_Cpu.cpp
gme/Kss_Emu.cpp
gme/Kss_Scc_Apu.cpp
gme/M3u_Playlist.cpp
gme/Multi_Buffer.cpp
gme/Music_Emu.cpp
gme/Nes_Apu.cpp
gme/Nes_Cpu.cpp
gme/Nes_Fme7_Apu.cpp
gme/Nes_Namco_Apu.cpp
gme/Nes_Oscs.cpp
gme/Nes_Vrc6_Apu.cpp
gme/Nsfe_Emu.cpp
gme/Nsf_Emu.cpp
gme/Sap_Apu.cpp
gme/Sap_Cpu.cpp
gme/Sap_Emu.cpp
gme/Sms_Apu.cpp
gme/Snes_Spc.cpp
gme/Spc_Cpu.cpp
gme/Spc_Dsp.cpp
gme/Spc_Emu.cpp
gme/Vgm_Emu.cpp
gme/Vgm_Emu_Impl.cpp
gme/Ym2413_Emu.cpp
gme/Ym2612_Emu.cpp
""")
    return gmeEnv.StaticLibrary('gme', source)

def unique(lst):
    m = []
    for item in lst:
        if not item in m:
            m.append(item)
    return m

for i in filelist:
    # print "%s = %s" % (i, filelist[i])
    # meh, kind of a hack
    if i == 'SCRIPT_SRC':
        # call the python and ruby checks here
        env = use.Clone()
        # config = env.Configure()
        # Ugly way to pass the custom tests in
        config = env.Configure(custom_tests = env['PAINTOWN_TESTS'])
        config.CheckRuby()
        config.CheckPython()
        env = config.Finish()
        use.Append(LIBS = env['LIBS'])
        use.Replace(LIBS = unique(use['LIBS']))
        files = filelist[i]
        # abstract this so we don't duplicate code
        obj_files.append(map(lambda x: env.StaticObject(x.replace('src/', '')), files))
    else:
        addFiles(filelist[i])

# obj_files.append(parser('air'))
# obj_files.append(parser('cns'))
# obj_files.append(parser('cmd'))
# obj_files.append(parser('def'))

def useSDL():
    import os
    try:
        return os.environ['SDL'] == '1'
    except KeyError:
        return False

def icon():
    if isWindows():
        return ['windows/game.res']
    else:
        return []

use.Append(LIBS = [gmeLibrary(use), sflLibrary(use)])
if useSDL():
    use.Append(LIBS = [sdlStretchLibrary(use)])

x = []
x.append(use.Program('paintown', obj_files + ['xmain.cpp'] + icon()))
#x.append( use.Program( 'test', obj_files + ['test.cpp'] ) )
#x.append( use.Program( 'menutest', obj_files + ['menu/menutest.cpp'] ) )
if not useSDL():
    x.append(use.Program('mugentest', obj_files + ['mugen/test.cpp']))
# x.append( use.Program( 'mugentest2', obj_files + ['mugen/test2.cpp'] ) )

SConscript('mugen/parser/SConstruct', exports = ['use']);
SConscript('test/SConstruct', exports = ['use'])

Return('x')
